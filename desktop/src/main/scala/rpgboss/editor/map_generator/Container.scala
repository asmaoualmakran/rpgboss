package rpgboss.editor.map_generator


/*
  Author: Asma Oualmakran
  Class: Container; constructs a container which is a subsection
                    of a canvas / game field
        parameters:
                  x: type -> Integer, the horizontal starting point of the canvas/field
                  y: type -> Integer, the vertical starting point of the canvas/field
                  h: type -> Integer, the horizontal end point of the canvas/field
                  w: type -> Integer, the vertical end point of the canvas/field
   case class is used, the data generated by the class is immutable.
 */


case class Container(x:Int, y:Int, h:Int, w:Int) extends Tcontainer {

  override val left_bound  = this.x
  override val upper_bound = this.y
  override val lower_bound = this.h
  override val right_bound = this.w
  override val width = right_bound - left_bound
  override val height = lower_bound - upper_bound


  /*
    Function: point; constructs a coordinate returns it in a form of a list
              parameters:
                        x: type -> Integer, the x coordinate of a point
                        y: type -> Integer, the y coordinate of a point
              retrun:
                    type -> Integer list

   */
  override def point(x:Int, y:Int):List[Int] = {
    val point = List(x,y)
    return point
  }

  /*
    Calculates the surface of the container, this is needed
    for sorting on size of the containers
    a container of an iterations can never be lager than the containers from the
    previous iteration
   */
  override def size():Int = {
    val surface = width*height
    return surface
  }

  override def center():List[Int] = {

    val hor_center = ((w - x)/2)
    val ver_center = ((h - y)/2)

    val center = point(hor_center,ver_center)
    return center
  }


}

